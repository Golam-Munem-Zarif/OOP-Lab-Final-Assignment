

package com.mycompany.clinic_mangement_syatem;

 import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Base class for all doctors
class Doctor {
    private String name;
    private String specialization;

    public Doctor(String name, String specialization) 
    {
        this.name = name;
        this.specialization = specialization;
    }

    public String getName()
    {
        return name;
    }

    public String getSpecialization() 
    {
        return specialization;
    }

    public void displayAvailability() 
    {
        System.out.println("Doctor's availability");
    }
}

// Class for General Practitioners
class GeneralPractitioner extends Doctor 
{
    public GeneralPractitioner(String name) 
    {
        super(name, "General Practitioner");
    }

    @Override
    public void displayAvailability() 
    {
        System.out.println("General Practitioner " + getName() + " is available for walk-in patients.");
    }

}

// Class for Specialists
class Specialist extends Doctor 
{
    public Specialist(String name, String specialization) 
    {
        super(name, specialization);
    }

    @Override
    public void displayAvailability() {
        System.out.println("Specialist " + getName() + " (" + getSpecialization() + ") requires appointment confirmation.");
    }

}

// Class for Patients
class Patient {
    private String name;
    private String id;

    public Patient(String name, String id) {
        this.name = name;
        this.id = id;
    }

    public String getName() 
    {
        return name;
    }

    public String getId() 
    {
        return id;
    }
}

// Class for Appointments
class Appointment 
{
    private Doctor doctor;
    private Patient patient;
    private String date;

    public Appointment(Doctor doctor, Patient patient, String date) 
    {
        this.doctor = doctor;
        this.patient = patient;
        this.date = date;
    }

    public Doctor getDoctor() 
    {
        return doctor;
    }

    public Patient getPatient()
    {
        return patient;
    }

    public String getDate() 
    {
        return date;
    }


    public void saveToFile() 
    {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("appointments.txt", true))) 
        {
            writer.write("Doctor: " + doctor.getName() + ", Specialization: " + doctor.getSpecialization() +
                    ", Patient: " + patient.getName() + ", Date: " + date);
            writer.newLine();
        } 
        
        catch (IOException e) 
        {
            e.printStackTrace();
        }
    }
}

// Main class for the Clinic Management System
public class ClinicManagementSystem 
{
    private static Scanner inputScanner = new Scanner(System.in);
    private static List<Doctor> doctors = new ArrayList<>();
    private static List<Patient> patients = new ArrayList<>();

    public static void main(String[] args) 
    {
        registerDoctors();
        registerPatients();
        displayDoctorAvailability();
        bookAppointments();
        inputScanner.close();
    }
    private static void registerDoctors() 
    {
        System.out.println("Enter number of doctors to register:");
        int numDoctors = inputScanner.nextInt();
        inputScanner.nextLine(); 

        for (int i = 0; i < numDoctors; i++) 
        {
            System.out.println("Enter doctor's name:");
            String name = inputScanner.nextLine();
            System.out.println("Enter doctor's specialization (1.General Practitioner or 2.Specialist):");
            System.out.println("Type-1.General Practitioner");
            System.out.println("Type-2.Specialist");
            String specialization = inputScanner.nextLine();

            if (specialization.equalsIgnoreCase("1")) 
            {
                doctors.add(new GeneralPractitioner(name));
            } 
            
            else 
            {
                System.out.println("Enter specialist's field:");
                String field = inputScanner.nextLine();
                doctors.add(new Specialist(name, field));
            }
        }
    }
    private static void registerPatients() 
    {
        System.out.println("Enter number of patients to register:");
        int numPatients = inputScanner.nextInt();
        inputScanner.nextLine(); 

        for (int i = 0; i < numPatients; i++) 
        {
            System.out.println("Enter patient's name:");
            String name = inputScanner.nextLine();
            System.out.println("Enter patient's ID:");
            String id = inputScanner.nextLine();
            patients.add(new Patient(name, id));
        }

    }

    private static void displayDoctorAvailability() 
    {
        for (Doctor i : doctors) 
        {
            i.displayAvailability();
        }
    }

    private static void bookAppointments() 
    {
        System.out.println("Enter the number of the appointments to book:");
        int numAppointments = inputScanner.nextInt();
        inputScanner.nextLine(); 

        for (int i = 0; i < numAppointments; i++) 
        {
            System.out.println("Enter the  ID of the patient's for the appointment:");
            String patientId = inputScanner.nextLine();
            Patient patient = findPatientById(patientId);

            if (patient == null) 
            {
                System.out.println("Patient not found.");
                continue;
            }

            System.out.println("Enter doctor's name for the appointment:");
            String doctorName = inputScanner.nextLine();
            Doctor doctor = findDoctorByName(doctorName);

            if (doctor == null) 
            {
                System.out.println("Doctor not found.");
                continue;
            }

            System.out.println("Enter appointment date (YYYY-MM-DD):");
            String date = inputScanner.nextLine();

            Appointment appointment = new Appointment(doctor, patient, date);
            appointment.saveToFile();
            System.out.println("Appointment is booked ");
        }
    }

    
    private static Patient findPatientById(String id) 
    {
        for (Patient i : patients) 
        {
            if (i.getId().equals(id)) return i;
        }
        return null;
    }


    private static Doctor findDoctorByName(String name) 
    {
        for (Doctor i : doctors) 
        {
            if (i.getName().equals(name)) 
            {
                return i;
            }
        }
        return null;
}
}
